# Azure DevOps pipeline to release a new version and deploy to production.

variables:
  NAMESPACE: 'payments'
  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'
  BUILD_NUMBER: $(Build.BuildNumber)
  DOCKER_IMAGE: 'io-pagopa-payment-updater-ms'

parameters:
  - name: 'RELEASE_SEMVER'
    displayName: 'When packing a release, define the version bump to apply'
    type: string
    values:
      - major
      - minor
      - patch
    default: minor
  - name: 'FORCE_REPLACE_DOCKER_IMAGE'
    displayName: 'Force the existing docker image to be replaced'
    type: boolean
    default: True
    values:
      - False
      - True
  - name: 'ENVIRONMENT_WEU_BETA'
    displayName: 'Deploy to weu-beta'
    type: boolean
    default: True
    values:
      - False
      - True
  - name: 'ENVIRONMENT_WEU_PROD_01'
    displayName: 'Deploy to weu-prod-01'
    type: boolean
    default: True
    values:
      - False
      - True
  - name: 'ENVIRONMENT_WEU_PROD_02'
    displayName: 'Deploy to weu-prod-02'
    type: boolean
    default: False
    values:
      - False
      - True

# Only manual activations are intended
trigger: none
pr: none

# resources:
#   repositories:
#     - repository: pagopaCommons
#       type: github
#       name: pagopa/azure-pipeline-templates
#       ref: refs/tags/v19
#       endpoint: 'io-azure-devops-github-ro'

pool:
  vmImage: 'ubuntu-latest'

stages:
  # Build
  - stage: Build
    #dependsOn:
    #  - Release
    jobs:
      - job: 'Build'
        steps:
          # - task: Bash@3
          #   displayName: Check Version and Branch
          #   inputs:
          #     targetType: 'inline'
          #     script: |
          #       version=$(cat pom.xml | grep '^.*<version>' | sed -n 2p | awk -F'[><]' '{print $3}')
          #       branch="$(Build.SourceBranch)"
          #       if [[ "$branch" != "refs/heads/master" && ! "$branch" =~ "refs/tags/.*" && "${{ parameters.environment }}" == "prod" ]]; then
          #         echo "Deploy branch $branch is not allowed."
          #         exit 1
          #       fi
          #       if [[ "$version" == *SNAPSHOT && "${{ parameters.environment }}" == "prod" ]]; then
          #         echo "Version $version is not allowed."
          #         exit 1
          #       fi
          #     failOnStderr: true

          - task: Bash@3
            displayName: Get POM version
            name: getpomversion
            inputs:
              targetType: 'inline'
              script: |
                version=$(cat pom.xml | grep '^.*<version>' | sed -n 2p | awk -F'[><]' '{print $3}')
                echo "##vso[task.setvariable variable=outputpomversion;isOutput=true]$version"
              failOnStderr: true

          - task: Docker@2
            displayName: 'docker login'
            inputs:
              containerRegistry: 'io-p-payments-acr-docker-registry-prod'
              command: 'login'
          - task: Bash@3
            displayName: 'docker build and push (force)'
            condition: and(succeeded(), eq(${{ parameters.FORCE_REPLACE_DOCKER_IMAGE }}, True))
            inputs:
              targetType: 'inline'
              script: |
                echo "the parameter FORCE_REPLACE_DOCKER_IMAGE is set to true, start build and push"
                docker build -t iopcommonacr.azurecr.io/$(DOCKER_IMAGE):$(Build.BuildId) .
                docker build -t iopcommonacr.azurecr.io/$(DOCKER_IMAGE):$(getpomversion.outputpomversion) .
                docker build -t iopcommonacr.azurecr.io/$(DOCKER_IMAGE):latest .
                docker push iopcommonacr.azurecr.io/$(DOCKER_IMAGE):$(Build.BuildId)
                docker push iopcommonacr.azurecr.io/$(DOCKER_IMAGE):$(getpomversion.outputpomversion)
                docker push iopcommonacr.azurecr.io/$(DOCKER_IMAGE):latest
          - task: Bash@3
            displayName: 'docker build and push'
            condition: and(succeeded(), eq(${{ parameters.FORCE_REPLACE_DOCKER_IMAGE }}, False))
            inputs:
              targetType: 'inline'
              script: |
                # docker will return 0 on success or 1 on failure.
                docker manifest inspect iopcommonacr.azurecr.io/$(DOCKER_IMAGE):latest > /dev/null

                if [ $? -eq 0 ]; then
                  echo "docker image already exists in the registry, skip build and push"
                else
                  echo "docker image does not exist in the registry, start build and push"
                  docker build -t iopcommonacr.azurecr.io/$(DOCKER_IMAGE):$(Build.BuildId) .
                  docker build -t iopcommonacr.azurecr.io/$(DOCKER_IMAGE):$(getpomversion.outputpomversion) .
                  docker build -t iopcommonacr.azurecr.io/$(DOCKER_IMAGE):latest .
                  docker push iopcommonacr.azurecr.io/$(DOCKER_IMAGE):$(Build.BuildId)
                  docker push iopcommonacr.azurecr.io/$(DOCKER_IMAGE):$(getpomversion.outputpomversion)
                  docker push iopcommonacr.azurecr.io/$(DOCKER_IMAGE):latest
                fi

  - stage: 'Serving_helm'
    displayName: 'Serving_Helm'
    dependsOn: Build
    jobs:
      - job: Serving_helm
        displayName: Serving_helm
        steps:
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Artifact manifests'
            condition: succeeded()
            inputs:
              targetPath: '$(Build.Repository.LocalPath)/helm'
              artifact: 'helm'
              publishLocation: 'pipeline'

  - stage: 'Deploy'
    dependsOn: 'Serving_helm'
    jobs:
      - deployment: 'Deploy'
        pool:
          name: io-prod-linux
        environment: PROD
        strategy:
          runOnce:
            deploy:
              steps:
                - download: none
                - task: DownloadPipelineArtifact@2
                  inputs:
                    buildType: 'current'
                    artifactName: 'helm'
                    targetPath: '$(Pipeline.Workspace)/helm'
                - task: Bash@3
                  displayName: 'prepare helm'
                  inputs:
                    targetType: 'inline'
                    script: |
                      helm repo add microservice-chart https://pagopa.github.io/aks-microservice-chart-blueprint
                      helm dep build $(Pipeline.Workspace)/helm
                - task: HelmDeploy@0
                  displayName: Helm upgrade
                  condition: and(succeeded(), eq(${{ parameters.ENVIRONMENT_WEU_BETA }}, True))
                  inputs:
                    kubernetesServiceEndpoint: io-payments-aks-weu-beta
                    namespace: $(NAMESPACE)
                    command: upgrade
                    chartType: filepath
                    chartPath: $(Pipeline.Workspace)/helm
                    chartName: $(DOCKER_IMAGE)
                    releaseName: $(DOCKER_IMAGE)
                    valueFile: '$(Pipeline.Workspace)/helm/values-beta.yaml'
                    overrideValues: microservice-chart.image.tag=$(Build.BuildId)
                    install: true
                    waitForExecution: true
                    arguments: '--timeout 5m0s'
                - task: HelmDeploy@0
                  displayName: Helm upgrade
                  condition: and(succeeded(), eq(${{ parameters.ENVIRONMENT_WEU_PROD_01 }}, True))
                  inputs:
                    kubernetesServiceEndpoint: io-payments-aks-weu-prod01
                    namespace: $(NAMESPACE)
                    command: upgrade
                    chartType: filepath
                    chartPath: $(Pipeline.Workspace)/helm
                    chartName: $(DOCKER_IMAGE)
                    releaseName: $(DOCKER_IMAGE)
                    valueFile: '$(Pipeline.Workspace)/helm/values-prod01.yaml'
                    overrideValues: microservice-chart.image.tag=$(Build.BuildId)
                    install: true
                    waitForExecution: true
                    arguments: '--timeout 5m0s'
